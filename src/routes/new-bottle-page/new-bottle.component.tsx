import { useNavigate } from 'react-router-dom';
import { Button } from 'react-md';
import { useEffect, useState } from 'react';
import { DocumentData } from 'firebase/firestore';

import BottleTable from '../../components/bottle-table/bottle-table.component';
import { PolishBottle } from '../../store/product/product.types';
import NewBottleButtons from '../../components/new-bottle-buttons/new-bottle-buttons';

import { BottleContainer, PaddedDiv } from './new-bottle.styles';
import {
  addNewItem,
  getItemsByWhereQuery,
  getProductIDWhereQuery,
} from '../../utils/firestore/firestore.utils';
import { ProductData } from '../bottle-page/bottle.component';

const NewBottle = () => {
  const emptyBottle: PolishBottle = {
    productId: ' ',
    userId: ' ',
    locationUserId: ' ',
    fullPercentage: 0,
    photoUrl: '',
  };

  const navigate = useNavigate();
  const mutation = addNewItem('bottles');
  const [bottle, setBottle] = useState(emptyBottle);
  const [selectedProduct, setSelectedProduct] = useState({
    brand: '',
    name: '',
  });
  const [selectedUser, setSelectedUser] = useState('');
  const [selectedLocationUser, setSelectedLocationUser] = useState('');

  const getProductIDQuery = getProductIDWhereQuery(
    selectedProduct.brand,
    selectedProduct.name,
    selectedProduct.brand.length > 0 && selectedProduct.name.length > 0
  );
  const getUserName = getItemsByWhereQuery(selectedUser, 'displayName', 'users', selectedUser.length>0);
  const getLocationUserName = getItemsByWhereQuery(selectedLocationUser, 'displayName', 'users', selectedLocationUser.length>0);

  const bottleMissingData = () => {
    if (
      bottle.productId.length > 0 &&
      bottle.userId.length > 0 &&
      bottle.locationUserId.length > 0
    )
      return false;
    else return true;
  };

  const setBottleFromChild = (bottle: PolishBottle | DocumentData) => {
    setBottle(bottle as PolishBottle);
  };

  const setProductFromChild = (data: ProductData) => {
    setSelectedProduct(data);
  };

  const setUsernameFromChild = (name: string) => {
    setSelectedUser(name);
  };

  const setLocationUsernameFromChild = (name: string) => {
    setSelectedLocationUser(name);
  };

  const saveClickedFromChild = () => {
    if (bottleMissingData()) {
      alert('Please fill all required fields before saving!');
    } else {
      mutation && mutation.mutate(bottle);
    }
  };

  const cancelClickedFromChild = () => {
    navigate('/bottles');
  };

  useEffect(() => {
    if (getProductIDQuery.isSuccess && getProductIDQuery.data?.docs) {
      const productId = getProductIDQuery.data?.docs[0].id;
      setBottle({ ...bottle, productId });
    }
  }, [getProductIDQuery.isSuccess]);

  useEffect(() => {
    if (getUserName.isSuccess && getUserName.data?.docs) {
      const userId = getUserName.data?.docs[0].id;
      setBottle({ ...bottle, userId });
    }
  }, [getUserName.isSuccess]);

  useEffect(() => {
    if (getLocationUserName.isSuccess && getLocationUserName.data?.docs) {
      const locationUserId = getLocationUserName.data?.docs[0].id;
      setBottle({ ...bottle, locationUserId });
    }
  }, [getLocationUserName.isSuccess]);

  useEffect(() => {
    if (mutation.isSuccess) {
      navigate(`/bottles/${mutation.data?.id}`);
    }
  }, [mutation]);

  return (
    <BottleContainer>
      
      <PaddedDiv>
        <Button themeType="contained" onClick={() => navigate('/bottles')}>
        Back to bottle list
        </Button>
      </PaddedDiv>
      <PaddedDiv><NewBottleButtons
        editable={true}
        seteditable={() => {}}
        onSaveClicked={saveClickedFromChild}
        onCancelClicked={cancelClickedFromChild}
        mutation={mutation}
      /></PaddedDiv>
      <BottleTable
        bottleId={'This will be generated by Firestore'}
        bottle={bottle}
        selectedProduct={selectedProduct}
        selectedUser={selectedUser}
        selectedLocationUser={selectedLocationUser}
        editable={true}
        setbottle={setBottleFromChild}
        setselectedproduct={setProductFromChild}
        setselecteduser={setUsernameFromChild}
        setselectedlocationuser={setLocationUsernameFromChild}
        newBottle={true}
      />
    </BottleContainer>
  );
};

export default NewBottle;
