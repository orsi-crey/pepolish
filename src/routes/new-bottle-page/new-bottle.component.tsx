import { useNavigate } from 'react-router-dom';
import { Button } from 'react-md';
import { useEffect, useState } from 'react';
import { DocumentData } from 'firebase/firestore';

import BottleTable from '../../components/bottle-table.component';
import NewBottleButtons from '../../components/new-bottle-buttons';
import { addNewItem, getListQuery } from '../../utils/firestore/firestore.utils';
import { ProductData } from '../bottle-page/bottle.types';

import { BottleContainer, PaddedDiv } from './new-bottle.styles';
import { getProductIdByProductData, getUserIdByDisplayname } from '../../utils/helperFunctions';

const NewBottle = () => {
  const navigate = useNavigate();
  const [bottle, setBottle] = useState({} as DocumentData);
  const [selectedProduct, setSelectedProduct] = useState({} as ProductData);
  const [selectedUser, setSelectedUser] = useState('');
  const [selectedLocationUser, setSelectedLocationUser] = useState('');

  const productList = getListQuery('products').data;
  const userList = getListQuery('users').data;
  const mutation = addNewItem('bottles');

  const bottleMissingData = () => {
    if (bottle.productId.length > 0 && bottle.userId.length > 0 && bottle.locationUserId.length > 0) return false;
    else return true;
  };

  const setProductFromChild = (data: ProductData) => {
    setSelectedProduct(data);
    if (productList) {
      const productId = getProductIdByProductData(productList, data);
      setBottle({ ...bottle, productId });
    }
  };

  const setUserFromChild = (displayName: string) => {
    const userId = getUserIdByDisplayname(userList, displayName);
    setSelectedUser(displayName);
    setBottle({ ...bottle, userId });
  };

  const setLocationUserFromChild = (locationDisplayName: string) => {
    const locationUserId = getUserIdByDisplayname(userList, locationDisplayName);
    setSelectedLocationUser(locationDisplayName);
    setBottle({ ...bottle, locationUserId });
  };

  const saveClickedFromChild = () => {
    if (bottleMissingData()) {
      alert('Please fill all required fields before saving!');
    } else {
      mutation && mutation.mutate(bottle);
    }
  };

  useEffect(() => {
    if (mutation.isSuccess) {
      navigate(`/bottles/${mutation.data?.id}`);
    }
  }, [mutation]);

  return (
    <BottleContainer>
      <PaddedDiv>
        <Button themeType="contained" onClick={() => navigate('/bottles')}>
          Back to bottle list
        </Button>
      </PaddedDiv>
      <PaddedDiv>
        <NewBottleButtons
          editable={true}
          seteditable={() => {}}
          onSaveClicked={saveClickedFromChild}
          onCancelClicked={() => navigate('/bottles')}
          mutation={mutation}
        />
      </PaddedDiv>
      <BottleTable
        bottleId={'This will be generated by Firestore'}
        bottle={bottle}
        selectedProduct={selectedProduct}
        selectedUser={selectedUser}
        selectedLocationUser={selectedLocationUser}
        editable={true}
        setbottle={(bottle: DocumentData) => setBottle(bottle)}
        setselectedproduct={setProductFromChild}
        setselecteduser={setUserFromChild}
        setselectedlocationuser={setLocationUserFromChild}
        newBottle={true}
      />
    </BottleContainer>
  );
};

export default NewBottle;
