import { useNavigate } from 'react-router-dom';
import { Button } from 'react-md';
import { useEffect, useState } from 'react';
import { DocumentData } from 'firebase/firestore';

import BottleTable from '../../components/bottle-table.component';
import { PolishBottle } from '../product-page/product.types';
import NewBottleButtons from '../../components/new-bottle-buttons';
import { addNewItem, getListQuery } from '../../utils/firestore/firestore.utils';
import { ProductData } from '../bottle-page/bottle.types';

import { BottleContainer, PaddedDiv } from './new-bottle.styles';

const NewBottle = () => {
  const emptyBottle: PolishBottle = {
    productId: ' ',
    userId: ' ',
    locationUserId: ' ',
    fullPercentage: 0,
    photoUrl: '',
  };

  const navigate = useNavigate();
  const mutation = addNewItem('bottles');
  const [bottle, setBottle] = useState(emptyBottle);
  const [selectedProduct, setSelectedProduct] = useState({} as ProductData);
  const [selectedUser, setSelectedUser] = useState('');
  const [selectedLocationUser, setSelectedLocationUser] = useState('');

  const productList = getListQuery('products').data;
  const userList = getListQuery('users').data;

  const bottleMissingData = () => {
    if (bottle.productId.length > 0 && bottle.userId.length > 0 && bottle.locationUserId.length > 0) return false;
    else return true;
  };

  const setBottleFromChild = (bottle: PolishBottle | DocumentData) => {
    setBottle(bottle as PolishBottle);
  };

  const setProductFromChild = (data: ProductData) => {
    setSelectedProduct(data);
  };

  const setUsernameFromChild = (name: string) => {
    setSelectedUser(name);
  };

  const setLocationUsernameFromChild = (name: string) => {
    setSelectedLocationUser(name);
  };

  const saveClickedFromChild = () => {
    if (bottleMissingData()) {
      alert('Please fill all required fields before saving!');
    } else {
      mutation && mutation.mutate(bottle);
    }
  };

  const cancelClickedFromChild = () => {
    navigate('/bottles');
  };

  useEffect(() => {
    if (productList) {
      const productId = Object.getOwnPropertyNames(productList).find(
        (productId) => productList?.get(productId)?.brand === selectedProduct.brand && productList?.get(productId)?.name === selectedProduct.name
      );
      setBottle({ ...bottle, productId: productId || '' });
    }
  }, [selectedProduct.name]);

  useEffect(() => {
    if (userList) {
      const userId = Object.getOwnPropertyNames(userList).find((userId) => userList?.get(userId)?.displayName === selectedUser);
      setBottle({ ...bottle, userId: userId || '' });
    }
  }, [selectedUser]);

  useEffect(() => {
    if (userList) {
      const locationUserId = Object.getOwnPropertyNames(userList).find((userId) => userList?.get(userId)?.displayName === selectedLocationUser);
      setBottle({ ...bottle, locationUserId: locationUserId || '' });
    }
  }, [selectedLocationUser]);

  useEffect(() => {
    if (mutation.isSuccess) {
      navigate(`/bottles/${mutation.data?.id}`);
    }
  }, [mutation]);

  return (
    <BottleContainer>
      <PaddedDiv>
        <Button themeType="contained" onClick={() => navigate('/bottles')}>
          Back to bottle list
        </Button>
      </PaddedDiv>
      <PaddedDiv>
        <NewBottleButtons
          editable={true}
          seteditable={() => {}}
          onSaveClicked={saveClickedFromChild}
          onCancelClicked={cancelClickedFromChild}
          mutation={mutation}
        />
      </PaddedDiv>
      <BottleTable
        bottleId={'This will be generated by Firestore'}
        bottle={bottle}
        selectedProduct={selectedProduct}
        selectedUser={selectedUser}
        selectedLocationUser={selectedLocationUser}
        editable={true}
        setbottle={setBottleFromChild}
        setselectedproduct={setProductFromChild}
        setselecteduser={setUsernameFromChild}
        setselectedlocationuser={setLocationUsernameFromChild}
        newBottle={true}
      />
    </BottleContainer>
  );
};

export default NewBottle;
